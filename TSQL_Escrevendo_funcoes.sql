/*	TSQL ESCREVENDO FUNÇÕES
		Funções definidas pelo usuário
*/

SELECT SUM(QUANTIDADE * [PREÇO]) FROM [ITENS NOTAS FISCAIS]
WHERE NUMERO = 100

CREATE FUNCTION FaturamentoNota (@NUMERO AS INT) RETURNS FLOAT
AS
BEGIN
  DECLARE @FATURAMENTO FLOAT
  SELECT @FATURAMENTO = SUM(QUANTIDADE * [PREÇO]) FROM [ITENS NOTAS FISCAIS]
  WHERE NUMERO = @NUMERO
  RETURN @FATURAMENTO
END


SELECT NUMERO, [dbo].[FaturamentoNota](NUMERO) AS FATURAMENTO 
FROM [NOTAS FISCAIS]



/*	Funções dentro de um loop
*/

DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @CONTADOR_NOTAS INT
DECLARE @TABELA_NUMEROS TABLE ([NUMERO] INT, [STATUS] VARCHAR(200), [FATURAMENTO] FLOAT)

SET @LIMITE_MINIMO = 98
SET @LIMITE_MAXIMO = 102

SET NOCOUNT ON
WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
   SELECT @CONTADOR_NOTAS = COUNT(*) FROM [NOTAS FISCAIS] WHERE [NUMERO] = @LIMITE_MINIMO
   IF @CONTADOR_NOTAS > 0 
       BEGIN
          INSERT INTO @TABELA_NUMEROS ([NUMERO], [STATUS], [FATURAMENTO]) 
		  VALUES (@LIMITE_MINIMO, 'É nota fiscal', [dbo].[FaturamentoNota](@LIMITE_MINIMO))
	    END
   ELSE
       BEGIN
          INSERT INTO @TABELA_NUMEROS ([NUMERO], [STATUS], [FATURAMENTO]) 
		  VALUES (@LIMITE_MINIMO, 'Não é nota fiscal', 0)
	    END
   SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1   
END

SELECT * FROM @TABELA_NUMEROS



/*	Usando funções como tabela
*/

SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [NOTAS FISCAIS] WHERE CPF = '1471156710'

CREATE FUNCTION ListaNotasCliente (@CPF AS VARCHAR(12)) RETURNS TABLE
AS
RETURN SELECT * FROM [NOTAS FISCAIS] WHERE CPF = @CPF

SELECT * FROM [dbo].[ListaNotasCliente]('1471156710')

SELECT COUNT(*) FROM [dbo].[ListaNotasCliente]('1471156710')

SELECT A.CPF, A.NUM_NOTA, B.TOTAL_FATURAMENTO
FROM
(SELECT CPF, (SELECT COUNT(*) FROM [dbo].[ListaNotasCliente](CPF)) AS NUM_NOTA
FROM [TABELA DE CLIENTES]) A
INNER JOIN
(SELECT CPF, SUM([dbo].[FaturamentoNota](NUMERO)) AS TOTAL_FATURAMENTO
FROM [NOTAS FISCAIS] GROUP BY CPF) B
ON A.CPF = B.CPF



/*	Alterando uma função
*/

CREATE FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR(100), @CIDADE VARCHAR(50), @ESTADO VARCHAR(50), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
   DECLARE @ENDERECO_COMPLETO VARCHAR(250)
   SET @ENDERECO_COMPLETO = @ENDERECO + ' - ' + @CIDADE + ' - ' + @ESTADO + ' - ' + @CEP
   RETURN @ENDERECO_COMPLETO
END

SELECT CPF, [dbo].[EnderecoCompleto]([ENDERECO 1], CIDADE, ESTADO, CEP) AS END_COMPLETO
FROM [TABELA DE CLIENTES]

ALTER FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR(100), @CIDADE VARCHAR(50), @ESTADO VARCHAR(50), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
   DECLARE @ENDERECO_COMPLETO VARCHAR(250)
   SET @ENDERECO_COMPLETO = @ENDERECO + ', ' + @CIDADE + ', ' + @ESTADO + ', ' + @CEP
   RETURN @ENDERECO_COMPLETO
END

SELECT CPF, [dbo].[EnderecoCompleto]([ENDERECO 1], CIDADE, ESTADO, CEP) AS END_COMPLETO
FROM [TABELA DE CLIENTES]



/*	Excluindo uma função
*/

IF OBJECT_ID ('EnderecoCompleto3', 'FN') IS NOT NULL
DROP FUNCTION [dbo].[EnderecoCompleto3] 

CREATE FUNCTION [dbo].[EnderecoCompleto3] 
(@ENDERECO VARCHAR(100), @CIDADE VARCHAR(50), @ESTADO VARCHAR(50), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
   DECLARE @ENDERECO_COMPLETO VARCHAR(250)
   SET @ENDERECO_COMPLETO = @ENDERECO + ', ' + @CIDADE + ', ' + @ESTADO + ', ' + @CEP
   RETURN @ENDERECO_COMPLETO
END
